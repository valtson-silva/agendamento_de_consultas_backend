services:
  db:
    image: postgres:17.2
    environment:
      POSTGRES_DB: ${DB_NAME}
      POSTGRES_USER: ${DB_USER}
      POSTGRES_PASSWORD: ${DB_PASSWORD}
    restart: always
    env_file:
      - .env
    ports:
      - "5432:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data

  redis:
    image: redis:alpine
    restart: always
    networks:
      - default
    ports:
      - "6379:6379"

  web:
    build: .
    restart: always
    environment:
      - DB_NAME=${DB_NAME}
      - DB_USER=${DB_USER}
      - DB_PASSWORD=${DB_PASSWORD}
      - CELERY_BROKER_URL=redis://redis:6379/0
      - SECRET_KEY=${SECRET_KEY}
      - DEBUG=${DEBUG}
      - EMAIL_HOST_USER=${EMAIL_HOST_USER}
      - EMAIL_HOST_PASSWORD=${EMAIL_HOST_PASSWORD}
      - DJANGO_ENV=${DJANGO_ENV}
    depends_on:
      - db
      - redis
    env_file:
      - .env
    ports:
      - "8000:8000"
    networks:
      - default
    volumes:
      - ./scheduling:/app/scheduling
    working_dir: /app/scheduling
    command: sh -c "
        if [ \"$DJANGO_ENV\" = \"production\" ]; then
          python scripts/create_group.py && python manage.py migrate && gunicorn appointment_scheduling.wsgi:application --bind 0.0.0.0:8000;
        else
          python scripts/create_group.py && python manage.py migrate && python manage.py runserver 0.0.0.0:8000;
        fi 
      "

  celery_worker:
    build: .
    restart: always
    depends_on:
      - web
      - redis
    env_file:
      - .env
    volumes: 
      - ./scheduling:/app/scheduling
    working_dir: /app/scheduling
    command: ["celery", "-A", "appointment_scheduling", "worker", "--loglevel=info"]

  celery_beat:
    build: .
    restart: always
    depends_on:
      - web
      - redis
    env_file:
      - .env
    volumes: 
      - ./scheduling:/app/scheduling
    working_dir: /app/scheduling
    command: >
      sh -c "
        echo 'Executando migrations para celery_beat...';
        python manage.py migrate &&
        echo 'Iniciando celery beat...';
        celery -A appointment_scheduling beat --loglevel=info --scheduler django_celery_beat.schedulers:DatabaseScheduler
      "

  test:
    build: .
    depends_on:
      - db
      - redis
    env_file:
      - .env
    command: ["pytest", "--disable-warnings", "--cov=app"]

networks:
  default:
    driver: bridge

volumes:
  postgres_data:
